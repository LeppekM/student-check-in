USE student_check_in;

DROP PROCEDURE IF EXISTS load_parts;
CREATE PROCEDURE load_parts()
  BEGIN
    DECLARE i int DEFAULT 1;
    DECLARE j int DEFAULT 0;
    TRUNCATE TABLE parts;
    START TRANSACTION;
    WHILE i < 683 DO
      IF i < 104 THEN
        set j = i;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Circuit Designers', j, 'MSOE', 9800, 1, 'S350 A1', 123, 0, 0, current_date, 'root', 0);
      ELSEIF i < 208 THEN
        set j = i - 103;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Wire Kits', j, 'RSR', 1195, 2, 'S350 B1', 1234, 0, 0, current_date, 'root', 0);
      ELSEIF i < 298 THEN
        set j = i - 207;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Parts Boxes', j, 'MSOE', 5000, 1, 'S350 C1', 12345, 0, 0, current_date, 'root', 0);
      ELSEIF i < 379 THEN
        set j = i - 297;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Cypress PSOC5LP Dev. Bds.', j, 'Cypress', 9343, 3, 'S350 D1', 123456, 0, 0, current_date, 'root', 0);
      ELSEIF i < 440 THEN
        set j = i - 378;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Cypress FM4 Kit', j, 'Cypress', 6945, 3, 'S350 E1', 1234567, 0, 0, current_date, 'root', 0);
      ELSEIF i < 467 THEN
        set j = i - 439;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Basic Stamp Kit', j, 'MSOE', 16700, 1, 'S350 F1', 10, 0, 0, current_date, 'root', 0);
      ELSEIF i < 480 THEN
        set j = i - 466;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Olimex ECG/EMG', j, 'MSOE', 2453, 1, 'S350 G1', 11, 0, 0, current_date, 'root', 0);
      ELSEIF i < 494 THEN
        set j = i - 479;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('TENS Unit', j, 'TENS', 4999, 4, 'S350 H1', 202, 0, 0, current_date, 'root', 0);
      ELSEIF i < 580 THEN
        set j = i - 493;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Analog Discovery 2', j, 'Digilent', 27900, 5, 'S350 I1', 1010, 0, 0, current_date, 'root', 0);
      ELSEIF i < 592 THEN
        set j = i - 579;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Fluke 123 Scopemeter', j, 'Fluke', 189900, 6, 'S350 J1', 5050, 0, 0, current_date, 'root', 0);
      ELSEIF i < 611 THEN
        set j = i - 591;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Fluke 43 & 43B Power Quality Analyzer', j, 'Fluke', 346900, 6, 'S350 K1', 6060, 0, 0, current_date, 'root', 0);
      ELSEIF i < 632 THEN
        set j = i - 610;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('SE1021 Nexus Kits', j, 'Nexus', 8200, 7, 'S350 L1', 7070, 0, 0, current_date, 'root', 0);
      ELSE
        set j = i - 631;
        insert into parts (partName, serialNumber, manufacturer, price, vendorID, location, barcode, isFaulty, isCheckedOut, createdAt, createdBy, isDeleted)
        values ('Milwaukee Tool DMM', j, 'Milwaukee Tool', 15900, 8, 'S350 M1', 8080, 0, 0, current_date, 'root', 0);
      END IF;
      set i = i + 1;
    END WHILE;
    COMMIT;
  END;

DROP PROCEDURE IF EXISTS load_vendors;
CREATE PROCEDURE load_vendors()
  BEGIN
    TRUNCATE TABLE vendors;
    START TRANSACTION;
    insert into vendors (vendor) values ('MSOE');
    insert into vendors (vendor) values ('RSR');
    insert into vendors (vendor) values ('Cypress');
    insert into vendors (vendor) values ('TENS');
    insert into vendors (vendor) values ('Digilent');
    insert into vendors (vendor) values ('Fluke');
    insert into vendors (vendor) values ('Nexus');
    insert into vendors (vendor) values ('Milwaukee Tool');
    COMMIT;
  END;

DROP PROCEDURE IF EXISTS load_students;
CREATE PROCEDURE load_students()
  BEGIN
    TRUNCATE TABLE students;
    START TRANSACTION;
    INSERT into students (studentID, email, studentName, createdAt, createdBy)
    VALUE (11111, 'langdk@msoe.edu','Daniel Lang', '2018-1-14', 'Jim');
    INSERT into students (studentID, email, studentName, createdAt, createdBy)
    VALUE (12345, 'bob@msoe.edu','Bob Bobsoni', '2018-1-14', 'Jim');
    INSERT into students (studentID, email, studentName, createdAt, createdBy)
    VALUE (22222, 'John@msoe.edu','John Johnson', '2018-1-14', 'Jim');
  END;

drop table if exists parts;
create table parts (
  partID       int NOT NULL AUTO_INCREMENT,
  partName     varchar(50),
  serialNumber varchar(20),
  manufacturer varchar(50),
  price        int,
  vendorID     int NOT NULL,
  location     varchar(20),
  barcode      varchar(20),
  isFaulty     bit,
  isCheckedOut bit,
  createdAt    date,
  updatedAt    date,
  deletedAt    date,
  createdBy    varchar(50),
  updatedBy    varchar(50),
  deletedBy    varchar(50),
  isDeleted    bit,
  PRIMARY KEY (partID)
);
-- #FOREIGN KEY (partID) REFERENCES checkout_parts (partID),
-- #FOREIGN KEY (vendorID) REFERENCES vendors (vendorID));

CALL load_parts();

# drop table if exists checkouts;
# create table checkouts (
# checkoutID int NOT NULL,
# studentID int NOT NULL,
# checkoutAt date,
# reservedAt date,
# createdAt date,
# updatedAt date,
# deletedAt date,
# createdBy varchar(50),
# updatedBy varchar(50),
# deletedBy varchar(50),
# PRIMARY KEY (checkoutID));
-- #FOREIGN KEY (checkoutID) REFERENCES checkout_parts (checkoutID),
-- #FOREIGN KEY (studentID) REFERENCES students (studentID));

# drop table if exists checkout_parts;
# create table checkout_parts (
# checkoutID int NOT NULL,
# partID int NOT NULL,
# checkoutQuantity int,
# checkinQuantity int,
# checkedInAt date,
# dueAt date,
# createdAt date,
# updatedAt date,
# deletedAt date,
# createdBy varchar(50),
# updatedBy varchar(50),
# deletedBy varchar(50),
# PRIMARY KEY (checkoutID, partID));
-- #FOREIGN KEY (partID) REFERENCES parts (partID));

drop table if exists checkout;
create table checkout (
  checkoutID int NOT NULL AUTO_INCREMENT,
  partID     int NOT NULL,
  studentID  int NOT NULL,
  checkoutAt date,
  reservedAt date,
  checkinAt  date,
  dueAt      date,
  createdAt  date,
  updatedAt  date,
  createdBy  varchar(50),
  updateedBy varchar(50),
  PRIMARY KEY (checkoutID)
);

drop table if exists vendors;
create table vendors (
  vendorID int NOT NULL AUTO_INCREMENT,
  vendor   varchar(50),
  description varchar(500),
  PRIMARY KEY (vendorID)
);

call load_vendors();

drop table if exists students;
create table students (
  studentID   int NOT NULL,
  email       varchar(50),
  studentName varchar(50),
  createdAt   date,
  updatedAt   date,
  deletedAt   date,
  createdBy   varchar(50),
  updatedBy   varchar(50),
  deletedBy   varchar(50),
  PRIMARY KEY (studentID)
);

call load_students();

drop table if exists fault;
create table fault (
  checkoutID  int NOT NULL,
  partID      int NOT NULL,
  description varchar(500),
  price       int,
  createdAt   date,
  updatedAt   date,
  deletedAt   date,
  createdBy   varchar(50),
  updatedBy   varchar(50),
  deletedBy   varchar(50),
  PRIMARY KEY (checkoutID, partID)
);
-- #FOREIGN KEY (checkoutID, partID) REFERENCES checkout_parts (checkoutID, partID));